#!/usr/bin/env python3
import asyncio
import sys
from pathlib import Path
from typing import Dict, Any

from pyrogram import Client

sys.path.append(str(Path(__file__).parent))

from src.utils import logger, setup_logger
from src.utils.credentials_manager import CredentialsManager
from src.core.constants import FileConstants, TelegramConstants


class AccountAuthenticator:
    
    def __init__(self):
        self.sessions_dir = Path(FileConstants.SESSIONS_DIR)
        self.sessions_dir.mkdir(exist_ok=True)
        self.credentials_manager = CredentialsManager(self.sessions_dir)
    

    async def add_account(self, session_name: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
        print(f"\nüì± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {session_name}")
        print("-" * 40)
        
        print("\nüìå –ü–æ–ª—É—á–∏—Ç–µ API Key –∏ API Hash –Ω–∞ https://my.telegram.org/auth")
        print("   1. –í–æ–π–¥–∏—Ç–µ –ø–æ–¥ —Å–≤–æ–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º")
        print("   2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
        print("   3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ App api_id –∏ App api_hash\n")
        
        try:
            api_id_str = input("API ID: ").strip()
            api_id = int(api_id_str)
            
            api_hash = input("API HASH: ").strip()
            
            if not api_hash or len(api_hash) != TelegramConstants.API_HASH_LENGTH:
                logger.error(f"API HASH –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å {TelegramConstants.API_HASH_LENGTH} —Å–∏–º–≤–æ–ª–∞")
                return False
            
        except ValueError:
            logger.error("API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return False
        
        print("\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        
        app_version = input("App version (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'MyApp 1.0'): ").strip()
        device_model = input("Device model (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Desktop'): ").strip()
        system_version = input("System version (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Windows 10'): ").strip()
        lang_code = input("Language code (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'ru' –∏–ª–∏ 'en'): ").strip()
        
        client_params = {
            "name": str(self.sessions_dir / session_name),
            "api_id": api_id,
            "api_hash": api_hash
        }
        
        if app_version:
            client_params["app_version"] = app_version
        if device_model:
            client_params["device_model"] = device_model
        if system_version:
            client_params["system_version"] = system_version
        if lang_code:
            client_params["lang_code"] = lang_code
        
        client = Client(**client_params)
        
        try:
            print("\n –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            print("   –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º Pyrogram –¥–ª—è –≤—Ö–æ–¥–∞")
            print("   (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Ç.–¥.)\n")
            
            await client.start()
            
            me = await client.get_me()
            logger.success(f"\n –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {me.first_name} (@{me.username})")
            
            self.credentials_manager.save(session_name, {
                "api_id": api_id,
                "api_hash": api_hash
            })
            
            await client.stop()
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    

    async def add_bot_account(self, session_name: str, bot_token: str) -> bool:
        print(f"\n –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞: {session_name}")
        print("-" * 40)
        
        print("\n –î–ª—è –±–æ—Ç–∞ –Ω—É–∂–Ω—ã API credentials (–Ω–µ —Ç–æ–∫–µ–Ω!)")
        print("   –ü–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ https://my.telegram.org –∫–∞–∫ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
        
        try:
            api_id_str = input("API ID: ").strip()
            api_id = int(api_id_str)
            
            api_hash = input("API HASH: ").strip()
            
            if not api_hash or len(api_hash) != TelegramConstants.API_HASH_LENGTH:
                logger.error(f"API HASH –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å {TelegramConstants.API_HASH_LENGTH} —Å–∏–º–≤–æ–ª–∞")
                return False
            
        except ValueError:
            logger.error("API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return False
        
        client = Client(
            name=str(self.sessions_dir / session_name),
            api_id=api_id,
            api_hash=api_hash,
            bot_token=bot_token
        )
        
        try:
            print("\n –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞...")
            
            await client.start()
            
            me = await client.get_me()
            logger.success(f"\n –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {me.first_name} (@{me.username})")
            
            self.credentials_manager.save(session_name, {
                "api_id": api_id,
                "api_hash": api_hash,
                "bot_token": bot_token,
                "is_bot": True
            })
            
            await client.stop()
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False
    

    async def check_sessions(self) -> Dict[str, Dict[str, Any]]:
        valid_sessions = {}
        
        for session_file in self.sessions_dir.glob("*.session"):
            session_name = session_file.stem
            
            creds = self.credentials_manager.load(session_name)
            if not creds:
                logger.warning(f"{session_name}: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö credentials")
                continue
            
            client = Client(
                name=str(self.sessions_dir / session_name),
                api_id=creds['api_id'],
                api_hash=creds['api_hash']
            )
            
            try:
                await client.start()
                me = await client.get_me()
                
                valid_sessions[session_name] = {
                    'name': me.first_name,
                    'username': me.username,
                    'id': me.id,
                    'is_bot': me.is_bot,
                    'is_premium': getattr(me, 'is_premium', False)
                }
                
                stars_balance = 0
                if not me.is_bot:
                    try:
                        stars_balance = await client.get_stars_balance()
                    except:
                        pass
                
                valid_sessions[session_name]['stars_balance'] = stars_balance
                
                premium = "‚≠ê" if getattr(me, 'is_premium', False) else ""
                stars = f"{stars_balance:,}" if stars_balance > 0 else ""
                logger.info(f"{session_name}: {me.first_name} (@{me.username}) {premium} {stars}")
                
                await client.stop()
                
            except Exception as e:
                logger.error(f"‚ùå {session_name}: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ ({str(e)[:50]}...)")
        
        return valid_sessions
    

    async def delete_session(self, session_name: str) -> bool:
        session_file = self.sessions_dir / f"{session_name}.session"
        
        if not session_file.exists():
            logger.error(f"–°–µ—Å—Å–∏—è {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        try:
            session_file.unlink()
            self.credentials_manager.delete(session_name)
            logger.success(f"–°–µ—Å—Å–∏—è {session_name} —É–¥–∞–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return False
    

    async def interactive_setup(self) -> None:
        print("\n" + "="*50)
        print("TELEGRAM GIFT SNIPER - –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê–ú–ò")
        print("="*50 + "\n")
        
        while True:
            print("\n –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç")
            print("2. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞")
            print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
            print("4. –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
            print("5. –í—ã—Ö–æ–¥")
            
            choice = input("\n –í–∞—à –≤—ã–±–æ—Ä (1-5): ").strip()
            
            if choice == "1":
                session_name = input("\n –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: buyer, hunter_1): ").strip()
                
                if not session_name:
                    print("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                    continue
                
                if ' ' in session_name:
                    print("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã!")
                    continue
                
                if (self.sessions_dir / f"{session_name}.session").exists():
                    print(f"–°–µ—Å—Å–∏—è {session_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    overwrite = input("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ").strip().lower()
                    if overwrite != 'y':
                        continue
                
                success = await self.add_account(session_name)
                
                if success:
                    print(f"\n –ê–∫–∫–∞—É–Ω—Ç {session_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    
                    sessions = list(self.sessions_dir.glob("*.session"))
                    if len(sessions) == 1:
                        print("\n –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç")
                        print("   –ü–µ—Ä–≤—ã–π –±—É–¥–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –æ—Ö–æ—Ç–Ω–∏–∫–∞–º–∏")
                else:
                    print(f"\n –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {session_name}")

            elif choice == "2":
                session_name = input("\n –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: notification_bot): ").strip()
                
                if not session_name:
                    print("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                    continue
                
                if ' ' in session_name:
                    print("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã!")
                    continue
                
                bot_token = input("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather: ").strip()
                
                if not bot_token or ':' not in bot_token:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞!")
                    continue
                
                if (self.sessions_dir / f"{session_name}.session").exists():
                    print(f"–°–µ—Å—Å–∏—è {session_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    overwrite = input("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ").strip().lower()
                    if overwrite != 'y':
                        continue
                
                success = await self.add_bot_account(session_name, bot_token)
                
                if success:
                    print(f"\n –ë–æ—Ç {session_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    print(f"\n –î–æ–±–∞–≤—å—Ç–µ –≤ config.py:")
                    print(f"BOT_SESSION = '{session_name}'")
                else:
                    print(f"\n –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ {session_name}")

            elif choice == "3":
                print("\n –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
                valid_sessions = await self.check_sessions()
                
                if valid_sessions:
                    print(f"\n –ù–∞–π–¥–µ–Ω–æ {len(valid_sessions)} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    
                    accounts = {k: v for k, v in valid_sessions.items() if not v['is_bot']}
                    bots = {k: v for k, v in valid_sessions.items() if v['is_bot']}
                    
                    if len(accounts) >= 2:
                        print("\n –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è config.py:")
                        print("-" * 40)
                        
                        sessions_list = list(accounts.keys())
                        buyer = max(sessions_list, key=lambda s: accounts[s]['stars_balance'])
                        hunters = [s for s in sessions_list if s != buyer]
                        
                        print(f"BUYER_SESSION = '{buyer}'")
                        print(f"HUNTER_SESSIONS = {hunters}")
                        
                        if bots:
                            bot_name = list(bots.keys())[0]
                            print(f"BOT_SESSION = '{bot_name}'")
                    else:
                        print("\n –î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 2 –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã")
                else:
                    print("\n –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
            elif choice == "4":
                session_name = input("\n –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()
                
                if session_name:
                    confirm = input(f" –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é {session_name}? (y/n): ").strip().lower()
                    if confirm == 'y':
                        await self.delete_session(session_name)
                
            elif choice == "5":
                print("\n –í—ã—Ö–æ–¥...")
                break
            
            else:
                print("\n –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")


async def main():
    setup_logger()
    authenticator = AccountAuthenticator()
    await authenticator.interactive_setup()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
